#
# Copyright (c) 2015 Linagora
#
# This program/library is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2.1 of the License, or (at your
# option) any later version.
#
# This program/library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
# for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program/library; If not, see <http://www.gnu.org/licenses/>
# for the GNU Lesser General Public License version 2.1.
#
#############################################################################
# Main file for the graph(s) definition(s) of a Petals Virtual Container
#
# A Petals Virtual container is composed of:
#   - a distributed registry with at least 2 nodes running on their own
#     dedicated VM
#   - a distributed container with at least 2 nodes running on their own
#     dedicated VM.       
#############################################################################

PetalsRegistry-VM {
    installer: target;
	children: PetalsRegistry;
}

PetalsRegistry {
    installer: script;
	exports: memberId = sample-member-0, ip, port = 7900, credentialsGroup = default-sample, credentialsPassword = s3cr3t, managementUrl = http://192.168.1.100:8080/mancenter;
}

# Note: To be able to add a new member to the cluster, the member must known at least one member of the cluster. That's why we introduce the master node that is the referent node.
# TODO: Replace PetalsRegistryMaster and PetalsRegistrySlave by only one component when Roboconf will support it
PetalsRegistryMaster {
    extends: PetalsRegistry;
	imports: PetalsRegistry.* (optional);
}

PetalsRegistrySlave {
    extends: PetalsRegistry;
	imports: PetalsRegistry.*;
}

PetalsContainer-VM {
    installer: target;
	children: PetalsContainerTemplate;
}

# Note: To be able to move a container into another sub-domain, we must known at least one container of the target sub-domain, the container "bootstrap"
# TODO: Replace PetalsContainerBootstrap and PetalsContainer by only one component when Roboconf will support it
PetalsContainerTemplate {
    installer: script;
	exports: containerId = sample-0, ip, jmxPort = 7700;
	imports: PetalsRegistry.ip, PetalsRegistry.port, PetalsRegistry.credentialsGroup, PetalsRegistry.credentialsPassword;
	children: PetalsJBIComponent;
}

PetalsContainerBootstrap {
    extends: PetalsContainerTemplate;
    # We duplicate export about containerId and ip waiting https://github.com/roboconf/roboconf-platform/issues/317
	exports: domainName = sample-domain, subdomainName = sample-subdomain, containerId = sample-0, ip;
}

PetalsContainer {
    extends: PetalsContainerTemplate;
    imports: PetalsContainerBootstrap.*;
}

PetalsJBIComponent {
    installer: script;
    # TODO: No default value should be set on 'componentId' because it has no sens
    exports: componentId = my-component-id;
    # TODO: Waiting https://github.com/roboconf/roboconf-platform/issues/184, we are not able to get value of JMX attributes of the container
    #       where the JBI component is runnning, so we use default values. When fixed, we can use env var in scripts to access these values.
}

PetalsBC {
    extends: PetalsJBIComponent;
    exports: componentType = BC;
}

PetalsSE {
    extends: PetalsJBIComponent;
    exports: componentType = SE;
}

PetalsSL {
    extends: PetalsJBIComponent;
    exports: componentType = SL;
}

PetalsSA {
    extends: PetalsJBIComponent;
    exports: componentType = SA;
}