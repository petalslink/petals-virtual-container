#
# Copyright (c) 2015 Linagora
#
# This program/library is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2.1 of the License, or (at your
# option) any later version.
#
# This program/library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
# for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program/library; If not, see <http://www.gnu.org/licenses/>
# for the GNU Lesser General Public License version 2.1.
#
#############################################################################
# Main file for the graph(s) definition(s) of a Petals Virtual Container
#
# A Petals Virtual container is composed of:
#   - a distributed registry with at least 2 nodes running on their own
#     dedicated VM
#   - a distributed container with at least 2 nodes running on their own
#     dedicated VM.       
#############################################################################

PetalsRegistry-VM {
    installer: target;
	children: PetalsRegistryTemplate;
}

PetalsRegistryTemplate {
    installer: script;
	exports: ip, port = 7900, credentialsGroup = default-sample, credentialsPassword = s3cr3t, managementUrl = http://192.168.1.100:8080/mancenter;
}

# Note: To be able to add a new member to the cluster, the member must known at least one member of the cluster. That's why we introduce the bootstrap node that is the referent node.
# TODO: Replace PetalsRegistryBootstrap and PetalsRegistry by only one component when Roboconf will support it
PetalsRegistryBootstrap {
    extends: PetalsRegistryTemplate;
	imports: PetalsRegistryTemplate.* (optional);
}

PetalsRegistry {
    extends: PetalsRegistryTemplate;
	imports: PetalsRegistryTemplate.*;
}

PetalsContainer-VM {
    installer: target;
	children: PetalsContainerTemplate;
}

# Note: To be able to move a container into another sub-domain, we must known at least one container of the target sub-domain, the container "bootstrap"
# TODO: Replace PetalsContainerBootstrap and PetalsContainer by only one component when Roboconf will support it
PetalsContainerTemplate {
    installer: script;
	exports: ip, jmxPort = 7700, jmxUser = petals, jmxPassword = petals;
	imports: PetalsRegistryTemplate.ip, PetalsRegistryTemplate.port, PetalsRegistryTemplate.credentialsGroup, PetalsRegistryTemplate.credentialsPassword;
	children: PetalsJBIComponent, PetalsSL;
}

PetalsContainerBootstrap {
    extends: PetalsContainerTemplate;
    exports: domainName = sample-domain, subdomainName = sample-subdomain;
}

PetalsContainer {
    extends: PetalsContainerTemplate;
    imports: PetalsContainerBootstrap.*;
}

PetalsJBIComponent {
    # TODO: PetalsJBIComponent is an abstract component, the real installer to use is depending on inherited components
	installer: script;
    children: PetalsSU;
    
    # Note: the instance name of a PetalsJBI component is the JBI identifier of the component
}

PetalsBC {
    extends: PetalsJBIComponent;
    installer: petals-bc-installer;
}

PetalsSE {
    extends: PetalsJBIComponent;
    installer: petals-se-installer;
}

PetalsSL {
    installer: petals-sl-installer;
	# As SL are not supported by Roboconf because:
	#   - a SL export no configuration parameter
	#   - Roboconf is not able to manage local dependency
	# We create a dummy exported variable and work with only one instance of Petals SE Activiti over all Petals containers
	exports: present = true;
}

PetalsSU {
    installer: petals-su-installer;
}